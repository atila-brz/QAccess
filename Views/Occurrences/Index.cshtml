@model IEnumerable<QAccess.Models.Occurrence>

@{
    ViewData["Title"] = "Ocorrência";
    @* var search = ''; *@
}

<div class="container-main">

    @if(ViewData["messageAlert"] is not null){
        <div id="alertMessage" class="alert alert-warning alert-dismissible" role="alert">
            <div>@ViewData["messageAlert"]</div>
            <button type="button" onload="GFG_Fun()" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
        </div>
    }

    @if(ViewData["messageSuccess"] is not null){
        <div id="alertMessage" class="alert alert-success alert-dismissible" role="alert">
            <div>@ViewData["messageSuccess"]</div>
            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
        </div>
    }
    
    <div class="row">
        <h3>Ocorrências</h3>
    </div>

    <div class="row">
        <div class="d-flex flex-row-reverse buttons-group-actions">
            <button data-bs-toggle="modal" data-bs-target="#registerDefaultModalAction" class="btn btn-primary ms-2 d-flex align-items-center">
                <svg width="15" height="15" viewBox="0 0 43 43" fill="none" xmlns="http://www.w3.org/2000/svg"><rect x="20.2942" y="0.441162" width="4.41176" height="41.9118" rx="2.20588" fill="white"/><rect x="0.441223" y="24.7058" width="4.41176" height="41.9118" rx="2.20588" transform="rotate(-90 0.441223 24.7058)" fill="white"/></svg>
                Adicionar
            </button>
        </div>
    </div>

    <div class="row filter">
        <ul class="list-unstyled list-group ps-0 nav nav-pills mb-auto">
            <li class="mb-1">
                <button class="justify-content-between btn btn-toggle d-inline-flex align-items-center rounded border-0 collapsed" data-bs-toggle="collapse" data-bs-target="#filter-collapse" aria-expanded="false">
                    <div  class="d-flex align-items-center">
                        <svg xmlns="http://www.w3.org/2000/svg" width="17" height="17" fill="currentColor" class="bi bi-funnel-fill" viewBox="0 0 16 16"><path d="M1.5 1.5A.5.5 0 0 1 2 1h12a.5.5 0 0 1 .5.5v2a.5.5 0 0 1-.128.334L10 8.692V13.5a.5.5 0 0 1-.342.474l-3 1A.5.5 0 0 1 6 14.5V8.692L1.628 3.834A.5.5 0 0 1 1.5 3.5v-2z"/></svg>
                        <span class="ps-2">Filtros</span>
                    </div>
                </button>
                <div class="collapse filter-group" id="filter-collapse">
                    <div class="d-flex row flex-nowrap flex-lg-row flex-column">
                        <div class="col-lg-6 col-sm-5">
                            <div class="input-group mb-3">
                                <input type="text" class="form-control" placeholder="Pesquise por uma palavra chave..." aria-label="Recipient's username" aria-describedby="filter_search">
                                <a class="btn btn-outline-secondary" type="button" id="filter_search">
                                    <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-search" viewBox="0 0 16 16"><path d="M11.742 10.344a6.5 6.5 0 1 0-1.397 1.398h-.001c.03.04.062.078.098.115l3.85 3.85a1 1 0 0 0 1.415-1.414l-3.85-3.85a1.007 1.007 0 0 0-.115-.1zM12 6.5a5.5 5.5 0 1 1-11 0 5.5 5.5 0 0 1 11 0z"/></svg>
                                </a>
                            </div>
                        </div>

                        <div class="col-lg-3 col-sm-5">
                            <input class="form-control" type="text" placeholder="Data inicial..."onfocus="(this.type='date')" onblur="(this.type='text')">
                        </div>
                        <div class="col-lg-3 col-sm-5">
                            <input class="form-control" type="text" placeholder="Data final..."onfocus="(this.type='date')" onblur="(this.type='text')">
                        </div>
                    </div>
                </div>
            </li>
        </ul>
    </div>

    <div class="row d-flex scrollarea list">
            @if (Model.Count() != 0)
            {     
                <div class="row row-cols-1 row-cols-lg-2 g-2" style="max-height: 100%">
                    @foreach (var item in Model)
                    {  
                        <div class="col">
                            <div class="card card_occurrence mb-3 pe-0 ps-2">
                                <div class="row g-0 ">
                                    <div class="col-md-4 py-1 imagem-occurrence-group">
                                        <img src="@Html.DisplayFor(modelItem => item.PhotoBase64)" class="rounded imagem-occurrence" alt="...">
                                    </div>
                                    <div class="col-md-8 body-group-occurence">
                                        <div class="card-body ">
                                            <div class="d-flex justify-content-between">
                                                <h5 class="card-title text-collapsed fs-6 ">
                                                    @Html.DisplayFor(modelItem => item.Title) 
                                                </h5>
                                                <div class="ms-2 status_cicle">
                                                    @if(item.Status == Occurrence.StatusOccurrence.Open){
                                                    <svg xmlns="http://www.w3.org/2000/svg" width="12" height="12" fill="#0d6efd" class="bi bi-circle-fill" viewBox="0 0 16 16">
                                                            <circle cx="8" cy="8" r="8"/>
                                                        </svg>
                                                    }
                                                    else if(item.Status == Occurrence.StatusOccurrence.InProgress){
                                                        <svg xmlns="http://www.w3.org/2000/svg" width="12" height="12" fill="#9e7805" class="bi bi-circle-fill" viewBox="0 0 16 16">
                                                            <circle cx="8" cy="8" r="8"/>
                                                        </svg>
                                                    }
                                                    else if(item.Status == Occurrence.StatusOccurrence.Closed){
                                                        <svg xmlns="http://www.w3.org/2000/svg" width="12" height="12" fill="#198754" class="bi bi-circle-fill" viewBox="0 0 16 16">
                                                            <circle cx="8" cy="8" r="8"/>
                                                        </svg>          
                                                    } 
                                                </div>
                                            </div>
                                            <p class="card-text text-collapsed font-body-card">@Html.DisplayFor(modelItem => item.Description)</p>
                                            <p class="card-text font-body-card">Por: <a asp-action="Details" asp-controller="Condominiums" asp-route-id="@item.CondominiumId" class="text-decoration-none text-primary">@Html.DisplayFor(modelItem => item.Responsable.Name)</a></p>
                                        </div>
                                        <div class="card-footer d-flex align-items-center justify-content-between">
                                            <small class="text-muted font-body-card">@Html.DisplayFor(modelItem => item.CreationDate)</small>
                                            <a type="button" asp-action="Details" asp-route-id="@item.OccurrenceId" class="btn btn-primary btn-sm">Visualizar</a>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    }
                </div>  

                Html.RenderPartial("_Pagination");
            }
            else
            {
                <div class="d-flex justify-content-center align-items-center no-registry-message">
                    <img src="/images/not_found_ilustration.jpg" width="250px" class="img-fluid" alt="">
                    <p>Não há registros!</p>
                </div>

                Html.RenderPartial("_Pagination");
                
            }
    </div>
</div>

@{
    Html.RenderPartial("_ModalRegister");
}

@{
    Html.RenderPartial("_ModalImage");
}

@section Scripts {
    <script>
        $(document).ready(function () {
            $('#image_modal').on('show.bs.modal', function (event) {
                var button = $(event.relatedTarget);
                var recipient = button.data('bs-whatever');
                var modal = $(this);
                modal.find('.modal-body img').attr('src', recipient);
            });
            $('#photo_path').on('change', function () {
                for (var i = 0; i < this.files.length; i++) {
                    let file = this.files[i];
                    let reader = new FileReader();
                    reader.onloadend = function () {
                    $('#photo').val(reader.result);
                    $('#gallery').append('<img src="' + reader.result + '" class="img-thumbnail image_detail_occurrence" data-bs-whatever="' + reader.result + '" data-bs-target="#image_modal" data-bs-toggle="modal" alt="" />');
                    }
                    if (file) {
                    reader.readAsDataURL(file);
                    }
                }
            });
        });
    </script>
}

@* Possivel codigo para fazer buscas nas ocorrêcias *@
 @* @section Scripts {

    <script>
        var cards = document.querySelectorAll('card_occurrence')
        var search = document.querySelector('#search input')
        search.addEventListener('keyup', function (e) {
            var text = e.target.value.toLowerCase();
            cards.forEach(function (card) {
                var cardText = card.querySelector('h5').textContent.toLowerCase();
                console.log(cardText)
                if (cardText.indexOf(text) != -1) {
                    card.classList.remove("d-none");
                    card.classList.add("d-block");
                } else {
                    card.classList.remove("d-block");
                    card.classList.add("d-none");
                }
            })
        })
    </script>
} *@